/**
 * Script de Reconvers√£o UTM ‚Üí Lat/Lng
 *
 * Converte marcos com coordenadas UTM mas sem lat/lng usando valida√ß√£o PERMISSIVA
 */

const Database = require('better-sqlite3');
const proj4 = require('proj4');
const fs = require('fs');
const path = require('path');

console.log('\nüîÑ RECONVERS√ÉO UTM ‚Üí LAT/LNG\n');

// ============================================
// 1. CONFIGURAR PROJ4
// ============================================

proj4.defs('EPSG:31982', '+proj=utm +zone=22 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs');
proj4.defs('EPSG:4326', '+proj=longlat +datum=WGS84 +no_defs');

console.log('‚úÖ Sistemas de coordenadas configurados\n');

// ============================================
// 2. CONECTAR AO BANCO
// ============================================

const dbPath = path.join(__dirname, '../../database/marcos.db');
const db = new Database(dbPath);

console.log('üìä Analisando marcos sem convers√£o...\n');

// ============================================
// 3. BUSCAR MARCOS SEM LAT/LNG
// ============================================

const marcosSemConversao = db.prepare(`
    SELECT
        id,
        codigo,
        coordenada_e,
        coordenada_n,
        latitude,
        longitude
    FROM marcos_levantados
    WHERE coordenada_e IS NOT NULL
      AND coordenada_n IS NOT NULL
      AND (latitude IS NULL OR longitude IS NULL)
    ORDER BY id
`).all();

console.log(`Encontrados: ${marcosSemConversao.length} marcos para reconverter\n`);

if (marcosSemConversao.length === 0) {
    console.log('‚úÖ Nenhum marco precisa de reconvers√£o!');
    db.close();
    process.exit(0);
}

// Mostrar alguns exemplos
console.log('üìã Primeiros 5 marcos a processar:');
console.table(marcosSemConversao.slice(0, 5).map(m => ({
    codigo: m.codigo,
    utm_e: m.coordenada_e,
    utm_n: m.coordenada_n,
    lat_atual: m.latitude,
    lng_atual: m.longitude
})));
console.log('');

// ============================================
// 4. FUN√á√ÉO DE CONVERS√ÉO COM VALIDA√á√ÉO PERMISSIVA
// ============================================

function converterComValidacaoPermissiva(coordenada_e, coordenada_n) {
    try {
        // Converter
        const [longitude, latitude] = proj4('EPSG:31982', 'EPSG:4326',
            [parseFloat(coordenada_e), parseFloat(coordenada_n)]
        );

        // Valida√ß√£o MUITO PERMISSIVA (todo o Sul do Brasil + margens)
        const latValida = latitude >= -35 && latitude <= -18;  // Ampliado!
        const lngValida = longitude >= -60 && longitude <= -44; // Ampliado!

        if (!latValida || !lngValida || isNaN(latitude) || isNaN(longitude)) {
            return {
                latitude: null,
                longitude: null,
                valido: false,
                motivo: `Coordenadas fora do range: lat=${latitude.toFixed(4)}, lng=${longitude.toFixed(4)}`
            };
        }

        // Verificar se est√° especificamente no Paran√° (apenas para estat√≠stica)
        const noParana = (
            latitude >= -27 && latitude <= -22 &&
            longitude >= -55 && longitude <= -48
        );

        return {
            latitude,
            longitude,
            valido: true,
            noParana,
            motivo: noParana ? 'Paran√°' : 'Fora do PR mas v√°lido'
        };

    } catch (error) {
        return {
            latitude: null,
            longitude: null,
            valido: false,
            motivo: `Erro: ${error.message}`
        };
    }
}

// ============================================
// 5. PROCESSAR CONVERS√ïES
// ============================================

console.log('‚öôÔ∏è  Iniciando reconvers√£o...\n');

let sucessos = 0;
let falhas = 0;
let noParana = 0;
let foraPR = 0;
const erros = [];

const stmtUpdate = db.prepare(`
    UPDATE marcos_levantados
    SET latitude = ?, longitude = ?
    WHERE id = ?
`);

marcosSemConversao.forEach((marco, index) => {
    const resultado = converterComValidacaoPermissiva(marco.coordenada_e, marco.coordenada_n);

    if (resultado.valido) {
        // Atualizar banco
        stmtUpdate.run(resultado.latitude, resultado.longitude, marco.id);
        sucessos++;

        if (resultado.noParana) {
            noParana++;
        } else {
            foraPR++;
        }

    } else {
        falhas++;
        erros.push({
            codigo: marco.codigo,
            utm_e: marco.coordenada_e,
            utm_n: marco.coordenada_n,
            motivo: resultado.motivo
        });
    }

    // Log de progresso
    if ((index + 1) % 50 === 0) {
        console.log(`   Processados: ${index + 1}/${marcosSemConversao.length}`);
    }
});

console.log(`\n‚úÖ Reconvers√£o conclu√≠da!\n`);

// ============================================
// 6. ESTAT√çSTICAS FINAIS
// ============================================

console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
console.log('RELAT√ìRIO DE RECONVERS√ÉO');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
console.log(`Data: ${new Date().toLocaleString('pt-BR')}\n`);

console.log('üìä RESULTADO:');
console.log(`   ‚úÖ Sucessos: ${sucessos} (${((sucessos/marcosSemConversao.length)*100).toFixed(1)}%)`);
console.log(`   ‚ùå Falhas: ${falhas} (${((falhas/marcosSemConversao.length)*100).toFixed(1)}%)\n`);

console.log('üìç LOCALIZA√á√ÉO:');
console.log(`   üó∫Ô∏è  No Paran√°: ${noParana}`);
console.log(`   üåé Fora do PR (mas v√°lido): ${foraPR}\n`);

// Verifica√ß√£o final no banco
const statsFinais = db.prepare(`
    SELECT
        COUNT(*) as total,
        COUNT(latitude) as com_latlng,
        COUNT(CASE WHEN latitude BETWEEN -27 AND -22 AND longitude BETWEEN -55 AND -48 THEN 1 END) as no_parana
    FROM marcos_levantados
`).get();

console.log('üíæ BANCO DE DADOS ATUALIZADO:');
console.log(`   Total de marcos: ${statsFinais.total}`);
console.log(`   Com Lat/Lng: ${statsFinais.com_latlng} (${((statsFinais.com_latlng/statsFinais.total)*100).toFixed(1)}%)`);
console.log(`   No Paran√°: ${statsFinais.no_parana}\n`);

console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

// ============================================
// 7. SALVAR RELAT√ìRIOS
// ============================================

const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 19);
const relatorioDir = path.join(__dirname, '../relatorios');

if (!fs.existsSync(relatorioDir)) {
    fs.mkdirSync(relatorioDir, { recursive: true });
}

// Relat√≥rio TXT
const relatorioTXT = `
RELAT√ìRIO DE RECONVERS√ÉO UTM ‚Üí LAT/LNG
Data: ${new Date().toLocaleString('pt-BR')}

PROCESSAMENTO:
- Marcos processados: ${marcosSemConversao.length}
- Sucessos: ${sucessos} (${((sucessos/marcosSemConversao.length)*100).toFixed(1)}%)
- Falhas: ${falhas} (${((falhas/marcosSemConversao.length)*100).toFixed(1)}%)

LOCALIZA√á√ÉO:
- No Paran√°: ${noParana}
- Fora do PR (v√°lido): ${foraPR}
- Inv√°lidos: ${falhas}

BANCO DE DADOS FINAL:
- Total de marcos: ${statsFinais.total}
- Com Lat/Lng: ${statsFinais.com_latlng} (${((statsFinais.com_latlng/statsFinais.total)*100).toFixed(1)}%)
- No Paran√°: ${statsFinais.no_parana}

VALIDA√á√ÉO APLICADA:
- Latitude: -35¬∞ a -18¬∞ (todo Sul do Brasil + margens)
- Longitude: -60¬∞ a -44¬∞ (todo Sul do Brasil + margens)
`;

fs.writeFileSync(
    path.join(relatorioDir, `reconversao_${timestamp}.txt`),
    relatorioTXT.trim()
);

console.log(`üìÑ Relat√≥rio TXT salvo: reconversao_${timestamp}.txt`);

// Relat√≥rio CSV de erros
if (erros.length > 0) {
    const csvContent = [
        'codigo,utm_e,utm_n,motivo',
        ...erros.map(e => `"${e.codigo}",${e.utm_e},${e.utm_n},"${e.motivo}"`)
    ].join('\n');

    fs.writeFileSync(
        path.join(relatorioDir, `erros_reconversao_${timestamp}.csv`),
        csvContent
    );

    console.log(`üìÑ Relat√≥rio de erros salvo: erros_reconversao_${timestamp}.csv`);

    // Mostrar primeiros 5 erros
    if (erros.length > 0) {
        console.log('\n‚ö†Ô∏è  PRIMEIROS 5 ERROS:');
        console.table(erros.slice(0, 5));
    }
}

console.log('\n‚úÖ RECONVERS√ÉO CONCLU√çDA!\n');

// ============================================
// 8. INSTRU√á√ïES FINAIS
// ============================================

console.log('üéØ PR√ìXIMOS PASSOS:');
console.log('   1. Recarregar frontend: http://localhost:3000');
console.log('   2. Ir para aba "Mapa"');
console.log('   3. Recarregar com Ctrl+Shift+R');
console.log(`   4. Verificar se ~${statsFinais.com_latlng} marcos aparecem no mapa\n`);

if (foraPR > 0) {
    console.log(`‚ö†Ô∏è  ATEN√á√ÉO: ${foraPR} marcos est√£o FORA do Paran√° mas foram convertidos.`);
    console.log('   Eles aparecem como v√°lidos mas podem estar em SC, SP ou MS.');
    console.log('   Revise esses casos se necess√°rio.\n');
}

db.close();
