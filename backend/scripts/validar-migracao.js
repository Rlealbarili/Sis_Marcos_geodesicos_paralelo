const { query, healthCheck, pool } = require('../database/postgres-connection');

async function validar() {
    console.log('üîç VALIDA√á√ÉO DA MIGRA√á√ÉO\n');

    try {
        // 1. Health Check
        console.log('1Ô∏è‚É£  Testando conex√£o...');
        const health = await healthCheck();
        console.log(`   ${health.status === 'OK' ? '‚úÖ' : '‚ùå'} ${health.status}`);
        if (health.status === 'OK') {
            console.log(`   üìÖ ${health.timestamp}`);
            console.log(`   üêò ${health.version}\n`);
        }

        // 2. Contar registros
        console.log('2Ô∏è‚É£  Contando registros...');
        const counts = await query(`
            SELECT
                COUNT(*) as total,
                COUNT(geom) as com_geometria,
                COUNT(CASE WHEN geom IS NULL THEN 1 END) as sem_geometria
            FROM marcos_levantados
        `);
        const c = counts.rows[0];
        console.log(`   üìä Total: ${c.total}`);
        console.log(`   üåç Com geometria: ${c.com_geometria}`);
        console.log(`   ‚ö†Ô∏è  Sem geometria: ${c.sem_geometria}\n`);

        // 3. Validar geometrias
        console.log('3Ô∏è‚É£  Validando geometrias...');
        const invalidas = await query(`
            SELECT COUNT(*) as invalidas
            FROM marcos_levantados
            WHERE geom IS NOT NULL AND NOT ST_IsValid(geom)
        `);
        console.log(`   ${invalidas.rows[0].invalidas === '0' ? '‚úÖ' : '‚ö†Ô∏è'} Geometrias inv√°lidas: ${invalidas.rows[0].invalidas}\n`);

        // 4. Testar fun√ß√µes
        console.log('4Ô∏è‚É£  Testando fun√ß√µes PostGIS...');
        const utm = await query("SELECT ST_AsText(utm_para_latlng(650589.8882, 7192069.4339)) as ponto");
        console.log(`   ‚úÖ utm_para_latlng: ${utm.rows[0].ponto}\n`);

        // 5. Verificar √≠ndices
        console.log('5Ô∏è‚É£  Verificando √≠ndices...');
        const indices = await query(`
            SELECT indexname FROM pg_indexes
            WHERE schemaname = 'public' AND tablename = 'marcos_levantados'
        `);
        console.log(`   ‚úÖ ${indices.rowCount} √≠ndices criados`);
        indices.rows.forEach(idx => {
            console.log(`      - ${idx.indexname}`);
        });
        console.log();

        console.log('üéâ VALIDA√á√ÉO CONCLU√çDA COM SUCESSO!\n');

    } catch (error) {
        console.error('‚ùå Erro:', error.message);
    } finally {
        await pool.end();
    }
}

validar();
