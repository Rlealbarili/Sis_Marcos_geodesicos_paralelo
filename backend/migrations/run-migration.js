const Database = require('better-sqlite3');
const fs = require('fs');
const path = require('path');

// ==========================================
// Script de Migra√ß√£o Automatizado
// ==========================================

const dbPath = path.join(__dirname, '../../database/marcos.db');
const migrationFile = path.join(__dirname, '001_create_integrated_schema.sql');

console.log('==========================================');
console.log('EXECUTANDO MIGRA√á√ÉO 001');
console.log('==========================================\n');

try {
    // Abrir conex√£o com o banco
    console.log('1Ô∏è‚É£ Conectando ao banco de dados...');
    const db = new Database(dbPath);
    console.log('‚úÖ Conectado com sucesso!\n');

    // Ler arquivo SQL
    console.log('2Ô∏è‚É£ Lendo arquivo de migra√ß√£o...');
    const sql = fs.readFileSync(migrationFile, 'utf8');
    console.log(`‚úÖ Arquivo lido: ${migrationFile}\n`);

    // Fazer backup antes da migra√ß√£o
    console.log('3Ô∏è‚É£ Criando backup do banco de dados...');
    const backupPath = dbPath.replace('.db', `_backup_${Date.now()}.db`);
    fs.copyFileSync(dbPath, backupPath);
    console.log(`‚úÖ Backup criado: ${backupPath}\n`);

    // Verificar tabelas existentes ANTES
    console.log('4Ô∏è‚É£ Tabelas existentes ANTES da migra√ß√£o:');
    const tabelasAntes = db.prepare(`
        SELECT name FROM sqlite_master
        WHERE type='table'
        ORDER BY name
    `).all();
    tabelasAntes.forEach(t => console.log(`   - ${t.name}`));
    console.log('');

    // Executar migra√ß√£o
    console.log('5Ô∏è‚É£ Executando migra√ß√£o...');
    db.exec(sql);
    console.log('‚úÖ Migra√ß√£o executada com sucesso!\n');

    // Verificar tabelas DEPOIS
    console.log('6Ô∏è‚É£ Tabelas existentes DEPOIS da migra√ß√£o:');
    const tabelasDepois = db.prepare(`
        SELECT name FROM sqlite_master
        WHERE type='table'
        ORDER BY name
    `).all();
    tabelasDepois.forEach(t => console.log(`   - ${t.name}`));
    console.log('');

    // Verificar views criadas
    console.log('7Ô∏è‚É£ Views criadas:');
    const views = db.prepare(`
        SELECT name FROM sqlite_master
        WHERE type='view'
        ORDER BY name
    `).all();
    views.forEach(v => console.log(`   - ${v.name}`));
    console.log('');

    // Verificar triggers criados
    console.log('8Ô∏è‚É£ Triggers criados:');
    const triggers = db.prepare(`
        SELECT name FROM sqlite_master
        WHERE type='trigger'
        ORDER BY name
    `).all();
    triggers.forEach(t => console.log(`   - ${t.name}`));
    console.log('');

    // Verificar dados de teste
    console.log('9Ô∏è‚É£ Verificando dados de teste:');
    const clientesTeste = db.prepare('SELECT COUNT(*) as count FROM clientes').get();
    const propriedadesTeste = db.prepare('SELECT COUNT(*) as count FROM propriedades').get();
    const verticesTeste = db.prepare('SELECT COUNT(*) as count FROM vertices').get();
    const memoriaisTeste = db.prepare('SELECT COUNT(*) as count FROM memoriais_importados').get();

    console.log(`   - Clientes: ${clientesTeste.count}`);
    console.log(`   - Propriedades: ${propriedadesTeste.count}`);
    console.log(`   - V√©rtices: ${verticesTeste.count}`);
    console.log(`   - Memoriais: ${memoriaisTeste.count}`);
    console.log('');

    // Testar views
    console.log('üîü Testando views criadas:');
    try {
        const viewTest = db.prepare('SELECT COUNT(*) as count FROM vw_propriedades_completas').get();
        console.log(`   ‚úÖ vw_propriedades_completas: ${viewTest.count} registros`);
    } catch (err) {
        console.log(`   ‚ùå Erro ao testar view: ${err.message}`);
    }
    console.log('');

    // Fechar conex√£o
    db.close();

    console.log('==========================================');
    console.log('‚úÖ MIGRA√á√ÉO CONCLU√çDA COM SUCESSO!');
    console.log('==========================================\n');
    console.log(`üìÅ Backup dispon√≠vel em: ${backupPath}\n`);

} catch (error) {
    console.error('\n==========================================');
    console.error('‚ùå ERRO NA MIGRA√á√ÉO!');
    console.error('==========================================\n');
    console.error('Erro:', error.message);
    console.error('\nüìã Stack trace:');
    console.error(error.stack);
    console.error('\n‚ö†Ô∏è O banco de dados N√ÉO foi modificado.');
    console.error('‚ö†Ô∏è Se houver backup, voc√™ pode restaur√°-lo.\n');
    process.exit(1);
}
