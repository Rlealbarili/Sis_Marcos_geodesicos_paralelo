/**
 * TESTE 03: VISUALIZA√á√ÉO DE POL√çGONOS NO MAPA
 * Valida carregamento GeoJSON, renderiza√ß√£o Leaflet, popups e intera√ß√µes
 */

import { test, expect } from '@playwright/test';
import { waitForMap, waitForAppReady, isPolygonVisible } from '../utils/helpers.js';

test.describe('Visualiza√ß√£o de Pol√≠gonos', () => {

  test.beforeEach(async ({ page }) => {
    await page.goto('http://localhost:3001');
    await waitForAppReady(page);
  });

  test('03.1 - Deve carregar pol√≠gonos das propriedades via GeoJSON', async ({ page }) => {
    // Aguardar chamada √† API de GeoJSON
    const responsePromise = page.waitForResponse(
      response => response.url().includes('/api/propriedades/geojson') && response.status() === 200,
      { timeout: 10000 }
    );

    try {
      const response = await responsePromise;
      const geojson = await response.json();

      console.log(`‚úÖ GeoJSON recebido: ${geojson.features?.length || 0} propriedades`);

      // Validar estrutura
      expect(geojson.type).toBe('FeatureCollection');
      expect(Array.isArray(geojson.features)).toBe(true);

      if (geojson.features.length > 0) {
        const firstFeature = geojson.features[0];
        expect(firstFeature.type).toBe('Feature');
        expect(firstFeature.geometry).toBeDefined();
        expect(firstFeature.properties).toBeDefined();
        console.log('‚úÖ Estrutura GeoJSON v√°lida');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è  Timeout aguardando GeoJSON - pode n√£o haver propriedades com geometria');
    }
  });

  test('03.2 - Deve renderizar pol√≠gonos no mapa Leaflet', async ({ page }) => {
    // Aguardar carregamento
    await page.waitForTimeout(4000);

    // Verificar se h√° pol√≠gonos renderizados
    const hasPolygons = await isPolygonVisible(page);

    if (hasPolygons) {
      const polygonCount = await page.locator('.leaflet-overlay-pane path').count();
      expect(polygonCount).toBeGreaterThan(0);
      console.log(`‚úÖ ${polygonCount} pol√≠gonos renderizados no mapa`);
    } else {
      console.log('‚ÑπÔ∏è  Nenhum pol√≠gono encontrado - banco pode estar vazio');
    }
  });

  test('03.3 - Deve aplicar estilos corretos aos pol√≠gonos (cores por tipo)', async ({ page }) => {
    await page.waitForTimeout(4000);

    const polygons = await page.locator('.leaflet-overlay-pane path').all();

    if (polygons.length > 0) {
      for (const polygon of polygons) {
        const stroke = await polygon.getAttribute('stroke');
        const fill = await polygon.getAttribute('fill');

        expect(stroke).toBeTruthy();
        expect(fill).toBeTruthy();

        console.log(`‚úÖ Pol√≠gono com stroke: ${stroke}, fill: ${fill}`);
      }
    } else {
      console.log('‚ÑπÔ∏è  Nenhum pol√≠gono para verificar estilos');
    }
  });

  test('03.4 - Deve exibir popup ao clicar no pol√≠gono', async ({ page }) => {
    await page.waitForTimeout(4000);

    const polygons = await page.locator('.leaflet-overlay-pane path').all();

    if (polygons.length > 0) {
      // Clicar no primeiro pol√≠gono
      await polygons[0].click();
      await page.waitForTimeout(1000);

      // Verificar se popup apareceu
      const popup = page.locator('.leaflet-popup');
      await expect(popup).toBeVisible();

      // Verificar conte√∫do do popup
      const popupContent = await popup.textContent();
      expect(popupContent.length).toBeGreaterThan(20);

      console.log('‚úÖ Popup exibido ao clicar no pol√≠gono');
      console.log('üìÑ Conte√∫do do popup:', popupContent.substring(0, 100) + '...');
    } else {
      console.log('‚ö†Ô∏è  Teste pulado: nenhum pol√≠gono dispon√≠vel');
    }
  });

  test('03.5 - Popup deve conter informa√ß√µes da propriedade', async ({ page }) => {
    await page.waitForTimeout(4000);

    const polygons = await page.locator('.leaflet-overlay-pane path').all();

    if (polygons.length > 0) {
      await polygons[0].click();
      await page.waitForTimeout(500);

      const popup = page.locator('.leaflet-popup');
      const popupText = await popup.textContent();

      // Verificar campos esperados no popup
      const expectedFields = ['Nome', 'Matr√≠cula', '√Årea', 'Cliente'];
      const foundFields = expectedFields.filter(field =>
        popupText.includes(field) || popupText.toLowerCase().includes(field.toLowerCase())
      );

      console.log(`‚úÖ Campos encontrados no popup: ${foundFields.join(', ')}`);
      expect(foundFields.length).toBeGreaterThan(0);
    } else {
      console.log('‚ö†Ô∏è  Teste pulado: nenhum pol√≠gono dispon√≠vel');
    }
  });

  test('03.6 - Popup deve mostrar √°rea calculada vs √°rea informada', async ({ page }) => {
    await page.waitForTimeout(4000);

    const polygons = await page.locator('.leaflet-overlay-pane path').all();

    if (polygons.length > 0) {
      await polygons[0].click();
      await page.waitForTimeout(500);

      const popup = page.locator('.leaflet-popup');
      const popupText = await popup.textContent();

      // Verificar se h√° informa√ß√µes de √°rea
      const hasArea = popupText.includes('√Årea') ||
                       popupText.includes('√°rea') ||
                       popupText.includes('m¬≤') ||
                       popupText.includes('ha');

      if (hasArea) {
        console.log('‚úÖ Informa√ß√µes de √°rea encontradas no popup');

        // Verificar se h√° diferen√ßa de √°rea
        const hasDifference = popupText.includes('Diferen√ßa') ||
                              popupText.includes('diferen√ßa') ||
                              popupText.includes('%');

        if (hasDifference) {
          console.log('‚úÖ Compara√ß√£o de √°reas exibida');
        }
      }
    } else {
      console.log('‚ö†Ô∏è  Teste pulado: nenhum pol√≠gono dispon√≠vel');
    }
  });

  test('03.7 - Deve aplicar efeito hover nos pol√≠gonos', async ({ page }) => {
    await page.waitForTimeout(4000);

    const polygons = await page.locator('.leaflet-overlay-pane path').all();

    if (polygons.length > 0) {
      const firstPolygon = polygons[0];

      // Capturar estilo inicial
      const initialStroke = await firstPolygon.getAttribute('stroke-width');

      // Passar mouse sobre o pol√≠gono
      await firstPolygon.hover();
      await page.waitForTimeout(500);

      // Capturar estilo ap√≥s hover
      const hoverStroke = await firstPolygon.getAttribute('stroke-width');

      console.log(`Stroke inicial: ${initialStroke}, Ap√≥s hover: ${hoverStroke}`);

      // Verificar se houve mudan√ßa no estilo (espera-se que fique mais grosso)
      if (hoverStroke !== initialStroke) {
        console.log('‚úÖ Efeito hover aplicado corretamente');
      } else {
        console.log('‚ÑπÔ∏è  Efeito hover pode n√£o ter sido detectado ou n√£o est√° implementado');
      }
    } else {
      console.log('‚ö†Ô∏è  Teste pulado: nenhum pol√≠gono dispon√≠vel');
    }
  });

  test('03.8 - Deve permitir toggle de visibilidade dos pol√≠gonos', async ({ page }) => {
    await page.waitForTimeout(4000);

    // Procurar bot√£o de toggle
    const toggleButton = page.locator('button:has-text("Propriedades"), button:has-text("Ocultar"), button:has-text("Mostrar")').first();

    const hasToggle = await toggleButton.count() > 0;

    if (hasToggle) {
      // Contar pol√≠gonos vis√≠veis
      const initialCount = await page.locator('.leaflet-overlay-pane path').count();

      // Clicar no toggle
      await toggleButton.click();
      await page.waitForTimeout(1000);

      // Contar novamente
      const afterToggleCount = await page.locator('.leaflet-overlay-pane path').count();

      console.log(`Pol√≠gonos antes: ${initialCount}, depois: ${afterToggleCount}`);

      // Deve ter mudado a quantidade
      expect(afterToggleCount).not.toBe(initialCount);
      console.log('‚úÖ Toggle de visibilidade funciona');
    } else {
      console.log('‚ÑπÔ∏è  Bot√£o de toggle n√£o encontrado');
    }
  });

  test('03.9 - Deve auto-ajustar zoom para mostrar todos os pol√≠gonos', async ({ page }) => {
    await page.waitForTimeout(4000);

    const polygons = await page.locator('.leaflet-overlay-pane path').all();

    if (polygons.length > 0) {
      // Verificar se mapa ajustou bounds automaticamente
      const bounds = await page.evaluate(() => {
        return window.map.getBounds();
      });

      expect(bounds).toBeDefined();
      console.log('‚úÖ Bounds do mapa:', bounds);

      // Verificar se zoom est√° em n√≠vel razo√°vel (n√£o muito longe nem muito perto)
      const zoom = await page.evaluate(() => window.map.getZoom());
      expect(zoom).toBeGreaterThan(5);
      expect(zoom).toBeLessThan(20);

      console.log(`‚úÖ Zoom ajustado: ${zoom}`);
    } else {
      console.log('‚ö†Ô∏è  Teste pulado: nenhum pol√≠gono dispon√≠vel');
    }
  });

  test('03.10 - Deve recarregar pol√≠gonos ao clicar em atualizar', async ({ page }) => {
    await page.waitForTimeout(4000);

    // Procurar bot√£o de atualizar/recarregar
    const reloadButton = page.locator('button:has-text("Atualizar"), button:has-text("Recarregar"), button[title*="atualizar"]').first();

    const hasReload = await reloadButton.count() > 0;

    if (hasReload) {
      // Contar pol√≠gonos atuais
      const initialCount = await page.locator('.leaflet-overlay-pane path').count();

      // Interceptar nova chamada √† API
      const responsePromise = page.waitForResponse(
        response => response.url().includes('/api/propriedades/geojson'),
        { timeout: 5000 }
      );

      // Clicar em recarregar
      await reloadButton.click();

      try {
        await responsePromise;
        await page.waitForTimeout(1000);

        const afterReloadCount = await page.locator('.leaflet-overlay-pane path').count();

        console.log(`Pol√≠gonos antes: ${initialCount}, depois: ${afterReloadCount}`);
        console.log('‚úÖ Pol√≠gonos recarregados com sucesso');
      } catch {
        console.log('‚ö†Ô∏è  Timeout aguardando recarga - bot√£o pode n√£o estar funcional');
      }
    } else {
      console.log('‚ÑπÔ∏è  Bot√£o de recarregar n√£o encontrado');
    }
  });

  test('03.11 - Deve validar geometrias SRID 31982 no backend', async ({ page }) => {
    // Este teste valida apenas a resposta da API
    try {
      const response = await page.waitForResponse(
        response => response.url().includes('/api/propriedades/geojson'),
        { timeout: 10000 }
      );

      const geojson = await response.json();

      if (geojson.features && geojson.features.length > 0) {
        const firstFeature = geojson.features[0];

        // Verificar estrutura da geometria
        expect(firstFeature.geometry.type).toBe('Polygon');
        expect(Array.isArray(firstFeature.geometry.coordinates)).toBe(true);
        expect(firstFeature.geometry.coordinates[0].length).toBeGreaterThanOrEqual(3);

        console.log('‚úÖ Geometria v√°lida (Polygon com coordenadas)');
        console.log(`   V√©rtices: ${firstFeature.geometry.coordinates[0].length}`);
      }
    } catch {
      console.log('‚ÑπÔ∏è  Nenhuma propriedade com geometria dispon√≠vel');
    }
  });

});
